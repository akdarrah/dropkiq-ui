"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const assert_1=require("../../util/assert"),lexical_1=require("../../parser/lexical"),types_1=require("../../types"),groupRE=new RegExp(`^(?:(${lexical_1.value.source})\\s*:\\s*)?(.*)$`),candidatesRE=new RegExp(lexical_1.value.source,"g");exports.default={parse:function(e){let s=groupRE.exec(e.args);assert_1.assert(s,`illegal tag: ${e.raw}`),this.group=new types_1.Expression(s[1]);const t=s[2];for(this.candidates=[];s=candidatesRE.exec(t);)this.candidates.push(s[0]);assert_1.assert(this.candidates.length,`empty candidates: ${e.raw}`)},render:function*(e,s,t){const a=`cycle:${yield this.group.value(e)}:`+this.candidates.join(","),i=e.getRegister("cycle");let r=i[a];void 0===r&&(r=i[a]=0);const c=this.candidates[r];r=(r+1)%this.candidates.length,i[a]=r;const n=yield new types_1.Expression(c).value(e);t.write(n)}};