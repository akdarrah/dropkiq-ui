"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const _=require("./underscore");class LiquidError extends Error{constructor(r,e){super(r.message),this.originalError=r,this.token=e}update(){const r=this.originalError,e=mkContext(this.token);this.message=mkMessage(r.message,this.token),this.stack=this.message+"\n"+e+"\n"+this.stack+"\nFrom "+r.stack}}class TokenizationError extends LiquidError{constructor(r,e){super(new Error(r),e),this.name="TokenizationError",super.update()}}exports.TokenizationError=TokenizationError;class ParseError extends LiquidError{constructor(r,e){super(r,e),this.name="ParseError",this.message=r.message,super.update()}}exports.ParseError=ParseError;class RenderError extends LiquidError{constructor(r,e){super(r,e.token),this.name="RenderError",this.message=r.message,super.update()}static is(r){return r instanceof RenderError}}exports.RenderError=RenderError;class AssertionError extends Error{constructor(r){super(r),this.name="AssertionError",this.message=r+""}}function mkContext(r){const e=r.input.split("\n"),s=Math.max(r.line-2,1),t=Math.min(r.line+3,e.length);return _.range(s,t+1).map(s=>`${s===r.line?">> ":"   "}${_.padStart(String(s),String(t).length)}| ${e[s-1]}`).join("\n")}function mkMessage(r,e){return e.file&&(r+=`, file:${e.file}`),r+=`, line:${e.line}, col:${e.col}`}exports.AssertionError=AssertionError;