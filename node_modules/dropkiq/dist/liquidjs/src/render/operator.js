"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const icomparable_1=require("../drop/icomparable"),underscore_1=require("../util/underscore"),boolean_1=require("../render/boolean");exports.precedence={"==":1,"!=":1,">":1,"<":1,">=":1,"<=":1,contains:1,and:0,or:0},exports.operatorImpls={"==":(e,a)=>icomparable_1.isComparable(e)?e.equals(a):icomparable_1.isComparable(a)?a.equals(e):e===a,"!=":(e,a)=>icomparable_1.isComparable(e)?!e.equals(a):icomparable_1.isComparable(a)?!a.equals(e):e!==a,">":(e,a)=>icomparable_1.isComparable(e)?e.gt(a):icomparable_1.isComparable(a)?a.lt(e):e>a,"<":(e,a)=>icomparable_1.isComparable(e)?e.lt(a):icomparable_1.isComparable(a)?a.gt(e):e<a,">=":(e,a)=>icomparable_1.isComparable(e)?e.geq(a):icomparable_1.isComparable(a)?a.leq(e):e>=a,"<=":(e,a)=>icomparable_1.isComparable(e)?e.leq(a):icomparable_1.isComparable(a)?a.geq(e):e<=a,contains:(e,a)=>!(!e||!underscore_1.isFunction(e.indexOf))&&e.indexOf(a)>-1,and:(e,a)=>boolean_1.isTruthy(e)&&boolean_1.isTruthy(a),or:(e,a)=>boolean_1.isTruthy(e)||boolean_1.isTruthy(a)};const list=Object.keys(exports.precedence);function isOperator(e){return list.includes(e)}exports.isOperator=isOperator;