"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const assert_1=require("../util/assert"),range_1=require("./range"),value_1=require("./value"),underscore_1=require("../util/underscore"),operator_1=require("./operator");class Expression{constructor(e=""){this.operands=[],this.postfix=[...toPostfix(e)]}*evaluate(e){assert_1.assert(e,"unable to evaluate: context not defined");for(const r of this.postfix)operator_1.isOperator(r)?this.evaluateOnce(r):range_1.isRange(r)?this.operands.push(yield range_1.rangeValue(r,e)):this.operands.push(yield new value_1.Value(r).evaluate(e));return this.operands[0]}*value(e){return underscore_1.toValue(yield this.evaluate(e))}evaluateOnce(e){const r=this.operands.pop(),t=this.operands.pop(),o=operator_1.operatorImpls[e](t,r);this.operands.push(o)}}function*tokenize(e){const r=e.length;let t="";const o={'"':'"',"'":"'","[":"]","(":")"};for(let s=0;s<r;s++){const a=e[s];switch(a){case"[":case'"':case"'":for(t+=a;s+1<r&&(t+=e[++s],e[s]!==o[a]););break;case" ":case"\t":case"\n":t&&(yield t),t="";break;default:t+=a}}t&&(yield t)}function*toPostfix(e){const r=[];for(const t of tokenize(e))if(operator_1.isOperator(t)){for(;r.length&&operator_1.precedence[r[r.length-1]]>operator_1.precedence[t];)yield r.pop();r.push(t)}else yield t;for(;r.length;)yield r.pop()}exports.Expression=Expression;