"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const DropkiqEngine_1=require("./DropkiqEngine"),uuid_1=require("uuid");class DropkiqEngineFromScope{constructor(e,t,n,s="",o={}){this.rawTextBody=e,this.caretIndex=t,this.scope=n,this.licenseKey=s,this.optionsFromUI=Object.assign(o,{allowEmptySchema:!0}),this.schema={},this.context=this.constructContextFromScope()}dropkiqEngine(){return new DropkiqEngine_1.DropkiqEngine(this.rawTextBody,this.caretIndex,this.schema,this.context,this.scope,this.licenseKey,this.optionsFromUI)}constructContextFromScope(){let e=this,t={};return Object.keys(this.scope).forEach((function(n){e.addValueSignature(e.scope,n,t)})),t}findValueType(e){switch(typeof e){case"undefined":return"ColumnTypes::String";case"boolean":return"ColumnTypes::Boolean";case"object":if(null===e)return"ColumnTypes::String";if("function"==typeof e.getMonth)return"ColumnTypes::DateTime";if(Array.isArray(e)){let t=e[0];return"ColumnTypes::HasOne"===this.findValueType(t)?"ColumnTypes::HasMany":"ColumnTypes::YAML"}return"ColumnTypes::HasOne";case"string":case"symbol":return"ColumnTypes::String";case"number":case"bigint":return"ColumnTypes::Numeric";default:throw new Error(`Received unknown type ${typeof e} while constructing context`)}}constructFakeSchemaTable(e){let t=uuid_1.v4(),n=this;return this.schema[t]={methods:{}},Object.keys(e).forEach((function(s){n.addValueSignature(e,s,n.schema[t].methods)})),t}addValueSignature(e,t,n){let s=e[t],o=this.findValueType(s),i=null;if("ColumnTypes::HasOne"===o&&(i=this.constructFakeSchemaTable(s)),"ColumnTypes::HasMany"===o){let e=s[0];i=this.constructFakeSchemaTable(e)}n[t]={type:o,foreign_table_name:i}}}exports.DropkiqEngineFromScope=DropkiqEngineFromScope;