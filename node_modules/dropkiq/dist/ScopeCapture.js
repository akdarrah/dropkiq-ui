"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const liquid_options_1=require("./liquidjs/src/liquid-options"),render_1=require("./liquidjs/src/render/render"),context_1=require("./liquidjs/src/context/context"),async_1=require("./liquidjs/src/util/async"),output_1=require("./liquidjs/src/template/output"),underscore_1=require("./liquidjs/src/util/underscore");let capturedContext,capturedRendered,tokenToCapture;output_1.Output.prototype.render=function*(e,t){this.token===tokenToCapture&&(capturedContext=JSON.parse(JSON.stringify(e)));const r=yield this.value.value(e),n=underscore_1.stringify(async_1.toValue(r));t.write(n),this.token===tokenToCapture&&(capturedRendered=n)};class ScopeCapture{constructor(e,t,r){this.templates=e,this.caretToken=t,this.renderer=new render_1.Render,this.dataSchema=r}optionsFromScope(){let e={};this.capture();let t=this.getCapturedContext()||{scopes:[]},r=t.scopes.shift()||{};return Object.keys(r).forEach(t=>{e[t]={type:this.classifyDataType(r[t]),foreign_table_name:null}}),t.scopes.forEach(t=>{delete t.forloop,Object.keys(t).forEach(r=>{let n=t[r];e[r]={type:"ColumnTypes::HasOne",foreign_table_name:n._table_name}})}),e}getCapturedContext(){return capturedContext}getCapturedRendered(){return capturedRendered}capture(e=this.dataSchema.constructedScope){let t={},r=liquid_options_1.applyDefault(liquid_options_1.normalize(t));tokenToCapture=this.caretToken;const n=Object.assign(Object.assign({},r),liquid_options_1.normalize(t)),o=new context_1.Context(e,n,!0);try{async_1.toValue(this.renderer.renderTemplates(this.templates,o))}catch(e){if("RenderError"===e.name)return capturedRendered="Liquid Render Error",!0;throw e}}classifyDataType(e){switch(typeof e){case"string":return"ColumnTypes::String";case"boolean":return"ColumnTypes::Boolean";case"number":return"ColumnTypes::Numeric";case"object":return"ColumnTypes::YAML";default:throw new Error(`Unknown assigns variable type for ${e}`)}}}exports.ScopeCapture=ScopeCapture;