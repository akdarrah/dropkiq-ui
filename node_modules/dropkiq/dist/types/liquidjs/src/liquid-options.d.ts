import IFS from './fs/ifs';
export interface LiquidOptions {
    /** A directory or an array of directories from where to resolve layout and include templates, and the filename passed to `.renderFile()`. If it's an array, the files are looked up in the order they occur in the array. Defaults to `["."]` */
    root?: string | string[];
    /** Add a extname (if filepath doesn't include one) before template file lookup. Eg: setting to `".html"` will allow including file by basename. Defaults to `""`. */
    extname?: string;
    /** Whether or not to cache resolved templates. Defaults to `false`. */
    cache?: boolean;
    /** If set, treat the `filepath` parameter in `{%include filepath %}` and `{%layout filepath%}` as a variable, otherwise as a literal value. Defaults to `true`. */
    dynamicPartials?: boolean;
    /** Enable strict filter existence. If set to `false`, undefined filters will be rendered as empty string. Otherwise, undefined filters will cause an exception. Defaults to `false`. */
    strictFilters?: boolean;
    /** Enable strict variable derivation.  If set to `false`, undefined variables will be rendered as empty string.  Otherwise, undefined variables will cause an exception. Defaults to `false`. */
    strictVariables?: boolean;
    /** Strip blank characters (including ` `, `\t`, and `\r`) from the right of tags (`{% %}`) until `\n` (inclusive). Defaults to `false`. */
    trimTagRight?: boolean;
    /** Similar to `trimTagRight`, whereas the `\n` is exclusive. Defaults to `false`. See Whitespace Control for details. */
    trimTagLeft?: boolean;
    /** Strip blank characters (including ` `, `\t`, and `\r`) from the right of values (`{{ }}`) until `\n` (inclusive). Defaults to `false`. */
    trimOutputRight?: boolean;
    /** Similar to `trimOutputRight`, whereas the `\n` is exclusive. Defaults to `false`. See Whitespace Control for details. */
    trimOutputLeft?: boolean;
    /** The left delimiter for liquid tags. **/
    tagDelimiterLeft?: string;
    /** The right delimiter for liquid tags. **/
    tagDelimiterRight?: string;
    /** The left delimiter for liquid outputs. **/
    outputDelimiterLeft?: string;
    /** The right delimiter for liquid outputs. **/
    outputDelimiterRight?: string;
    /** Whether `trim*Left`/`trim*Right` is greedy. When set to `true`, all consecutive blank characters including `\n` will be trimed regardless of line breaks. Defaults to `true`. */
    greedy?: boolean;
    /** `fs` is used to override the default file-system module with a custom implementation. */
    fs?: IFS;
}
interface NormalizedOptions extends LiquidOptions {
    root?: string[];
}
export interface NormalizedFullOptions extends NormalizedOptions {
    root: string[];
    extname: string;
    cache: boolean;
    dynamicPartials: boolean;
    strictFilters: boolean;
    strictVariables: boolean;
    trimTagRight: boolean;
    trimTagLeft: boolean;
    trimOutputRight: boolean;
    trimOutputLeft: boolean;
    tagDelimiterLeft: string;
    tagDelimiterRight: string;
    outputDelimiterLeft: string;
    outputDelimiterRight: string;
    greedy: boolean;
}
export declare function normalize(options?: LiquidOptions): NormalizedOptions;
export declare function applyDefault(options?: NormalizedOptions): NormalizedFullOptions;
export declare function normalizeStringArray(value: any): string[];
export {};
