import { FilterImpl } from '../../template/filter/filter-impl';
declare const _default: {
    'join': (v: any[], arg: string) => string;
    'last': (v: any) => any;
    'first': (v: any) => any;
    'map': typeof map;
    'reverse': (v: any[]) => any[];
    'sort': <T>(v: T[], arg: (lhs: T, rhs: T) => number) => T[];
    'size': (v: string | any[]) => number;
    'concat': typeof concat;
    'slice': typeof slice;
    'uniq': typeof uniq;
    'where': typeof where;
};
export default _default;
declare function map<T1, T2>(arr: {
    [key: string]: T1;
}[], arg: string): T1[];
declare function concat<T1, T2>(v: T1[], arg: T2[] | T2): (T1 | T2)[];
declare function slice<T>(v: T[], begin: number, length?: number): T[];
declare function where<T extends object>(this: FilterImpl, arr: T[], property: string, expected?: any): T[];
declare function uniq<T>(arr: T[]): T[];
